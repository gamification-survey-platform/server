# Generated by Django 3.2 on 2023-03-26 12:50

import app.gamification.models.course
import app.gamification.models.user
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('andrew_id', models.CharField(error_messages={'unique': 'A user with that andrew id already exists.'}, help_text='Required. 150 characters or fewer. Lower case letters only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='Andrew ID')),
                ('image', models.ImageField(blank=True, upload_to='profile_pics', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['png', 'jpg', 'jpeg']), app.gamification.models.user.FileSizeValidator(max_size=5242880)], verbose_name='profile picture')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='data joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'users',
            },
            managers=[
                ('objects', app.gamification.models.user.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'answer',
                'verbose_name_plural': 'answers',
                'db_table': 'answer',
            },
        ),
        migrations.CreateModel(
            name='Artifact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upload_time', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='upload time')),
                ('file', models.FileField(blank=True, help_text='Upload a PDF file.', upload_to='assignment_files', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])], verbose_name='assignment file')),
            ],
            options={
                'verbose_name': 'artifact',
                'verbose_name_plural': 'artifacts',
                'db_table': 'artifact',
            },
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assignment_name', models.CharField(blank=True, max_length=150, verbose_name='assignment name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('assignment_type', models.TextField(blank=True, choices=[('Individual', 'Individual'), ('Team', 'Team')], default='Individual')),
                ('submission_type', models.TextField(blank=True, choices=[('File', 'File'), ('URL', 'Url'), ('Text', 'Text')], default='File')),
                ('total_score', models.FloatField(blank=True, null=True)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('date_created', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='date created')),
                ('date_released', models.DateTimeField(blank=True, null=True, verbose_name='date released')),
                ('date_due', models.DateTimeField(blank=True, null=True, verbose_name='date due')),
                ('review_assign_policy', models.TextField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C')], default='A')),
            ],
            options={
                'verbose_name': 'assignment',
                'verbose_name_plural': 'assignments',
                'db_table': 'assignment',
            },
        ),
        migrations.CreateModel(
            name='Constraint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.TextField(blank=True, verbose_name='url')),
                ('threshold', models.IntegerField()),
                ('description', models.TextField(blank=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'constraint',
                'verbose_name_plural': 'constraints',
                'db_table': 'constraints',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_number', models.CharField(blank=True, max_length=150, verbose_name='course number')),
                ('course_name', models.CharField(blank=True, max_length=150, verbose_name='course name')),
                ('syllabus', models.TextField(blank=True, verbose_name='syllabus')),
                ('semester', models.CharField(blank=True, max_length=150, verbose_name='semester')),
                ('visible', models.BooleanField(default=False, verbose_name='visible')),
                ('picture', models.ImageField(blank=True, upload_to='profile_pics', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['png', 'jpg', 'jpeg']), app.gamification.models.course.FileSizeValidator(max_size=5242880)], verbose_name='course picture')),
            ],
            options={
                'verbose_name': 'course',
                'verbose_name_plural': 'courses',
                'db_table': 'courses',
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.course')),
            ],
            options={
                'verbose_name': 'entity',
                'verbose_name_plural': 'entities',
                'db_table': 'entities',
            },
        ),
        migrations.CreateModel(
            name='OptionChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'option choice',
                'verbose_name_plural': 'option choices',
                'db_table': 'option_choice',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True)),
                ('is_required', models.BooleanField(default=False)),
                ('is_multiple', models.BooleanField(default=False)),
                ('is_template', models.BooleanField(default=False)),
                ('question_type', models.TextField(choices=[('MULTIPLETEXT', 'Multipletext'), ('FIXEDTEXT', 'Fixedtext'), ('MULTIPLECHOICE', 'Multiplechoice'), ('SLIDEREVIEW', 'Slidereview'), ('TEXTAREA', 'Textarea'), ('NUMBER', 'Number'), ('SCALEMULTIPLECHOICE', 'Scalemultiplechoice')], default='MULTIPLECHOICE')),
                ('number_of_scale', models.IntegerField(blank=True, default=5, null=True)),
                ('dependent_question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gamification.question')),
            ],
            options={
                'verbose_name': 'question',
                'verbose_name_plural': 'questions',
                'db_table': 'question',
            },
        ),
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=255, verbose_name='name')),
                ('description', models.TextField(default='', verbose_name='description')),
                ('exp_point', models.IntegerField(default=0, null=True, verbose_name='exp_point')),
                ('type', models.TextField(choices=[('Badge', 'Badge'), ('Bonus', 'Bonus'), ('Late Submission', 'Latesubmission'), ('Theme', 'Theme'), ('Other', 'Other')], default='Other')),
                ('inventory', models.IntegerField(blank=True, default=-1, null=True, verbose_name='inventory')),
                ('is_active', models.BooleanField(blank=True, default=False, null=True, verbose_name='is active')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='rewards', verbose_name='reward_picture')),
                ('quantity', models.IntegerField(blank=True, null=True, verbose_name='quantity')),
                ('theme', models.TextField(blank=True, choices=[('Dark', 'Dark'), ('Red', 'Red')], null=True)),
                ('course', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, to='gamification.course')),
            ],
            options={
                'verbose_name': 'reward',
                'verbose_name_plural': 'rewards',
                'db_table': 'rewards',
            },
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default', models.BooleanField(default=False)),
                ('name', models.CharField(blank=True, max_length=150, verbose_name='Rule name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'rule',
                'verbose_name_plural': 'rules',
                'db_table': 'rules',
            },
        ),
        migrations.CreateModel(
            name='SurveyTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('instructions', models.TextField(blank=True)),
                ('is_template', models.BooleanField(default=False)),
                ('other_info', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'survey template',
                'verbose_name_plural': 'survey templates',
                'db_table': 'survey_template',
            },
        ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('constraint_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gamification.constraint')),
            ],
            options={
                'verbose_name': 'action',
                'verbose_name_plural': 'actions',
                'db_table': 'actions',
            },
            bases=('gamification.constraint',),
        ),
        migrations.CreateModel(
            name='ArtifactFeedback',
            fields=[
                ('answer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gamification.answer')),
                ('page', models.CharField(blank=True, max_length=150, verbose_name='page')),
            ],
            options={
                'verbose_name': 'artifact_feedback',
                'verbose_name_plural': 'artifact_feedback',
                'db_table': 'artifact_feedback',
            },
            bases=('gamification.answer',),
        ),
        migrations.CreateModel(
            name='Individual',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gamification.entity')),
            ],
            options={
                'verbose_name': 'individual',
                'verbose_name_plural': 'individuals',
                'db_table': 'individuals',
            },
            bases=('gamification.entity',),
        ),
        migrations.CreateModel(
            name='Point',
            fields=[
                ('constraint_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gamification.constraint')),
            ],
            options={
                'verbose_name': 'point',
                'verbose_name_plural': 'points',
                'db_table': 'points',
            },
            bases=('gamification.constraint',),
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gamification.entity')),
                ('name', models.CharField(blank=True, max_length=150, verbose_name='team')),
            ],
            options={
                'verbose_name': 'team',
                'verbose_name_plural': 'teams',
                'db_table': 'teams',
            },
            bases=('gamification.entity',),
        ),
        migrations.CreateModel(
            name='UserReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.reward')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user reward',
                'verbose_name_plural': 'user rewards',
                'db_table': 'user_reward',
            },
        ),
        migrations.CreateModel(
            name='TodoList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=200)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('type_name', models.CharField(default='Assignment', max_length=200)),
                ('type_icon', models.CharField(default='fa-solid fa-book', max_length=100)),
                ('mandatory', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'todo_list',
                'verbose_name_plural': 'todo_lists',
                'db_table': 'todo_list',
            },
        ),
        migrations.CreateModel(
            name='SurveySection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
                ('description', models.TextField(blank=True)),
                ('is_required', models.BooleanField(default=False)),
                ('is_template', models.BooleanField(default=False)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.surveytemplate')),
            ],
            options={
                'verbose_name': 'survey section',
                'verbose_name_plural': 'survey sections',
                'db_table': 'survey_section',
            },
        ),
        migrations.CreateModel(
            name='RuleConstraint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('constraint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.constraint')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.rule')),
            ],
            options={
                'verbose_name': 'rule constraint',
                'verbose_name_plural': 'rule constraints',
                'db_table': 'rule_constraints',
            },
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userRole', models.TextField(choices=[('Student', 'Student'), ('Instructor', 'Instructor'), ('TA', 'Ta')], default='Student')),
                ('courses', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.course')),
                ('users', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'registration',
                'verbose_name_plural': 'registrations',
                'db_table': 'registration',
            },
        ),
        migrations.CreateModel(
            name='QuestionOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_text', models.PositiveIntegerField(default=1)),
                ('option_choice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.optionchoice')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.question')),
            ],
            options={
                'verbose_name': 'question option',
                'verbose_name_plural': 'question options',
                'db_table': 'question_option',
            },
        ),
        migrations.AddField(
            model_name='question',
            name='option_choices',
            field=models.ManyToManyField(through='gamification.QuestionOption', to='gamification.OptionChoice'),
        ),
        migrations.AddField(
            model_name='question',
            name='section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.surveysection'),
        ),
        migrations.CreateModel(
            name='Progress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('met', models.BooleanField(default=False)),
                ('cur_point', models.FloatField(blank=True, default=0)),
                ('constraint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.constraint')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'progress',
                'verbose_name_plural': 'progresses',
                'db_table': 'progresses',
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.entity')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.registration')),
            ],
            options={
                'verbose_name': 'membership',
                'verbose_name_plural': 'membership',
                'db_table': 'membership',
            },
        ),
        migrations.CreateModel(
            name='FeedbackSurvey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_released', models.DateTimeField(blank=True, null=True)),
                ('date_due', models.DateTimeField(blank=True, null=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.assignment')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.surveytemplate')),
            ],
            options={
                'verbose_name': 'feedback survey',
                'verbose_name_plural': 'feedback surveys',
                'db_table': 'feedback_survey',
            },
        ),
        migrations.AddField(
            model_name='entity',
            name='registration',
            field=models.ManyToManyField(through='gamification.Membership', to='gamification.Registration'),
        ),
        migrations.CreateModel(
            name='CourseRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.course')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.rule')),
            ],
            options={
                'verbose_name': 'course rule',
                'verbose_name_plural': 'course_rules',
                'db_table': 'course_rules',
            },
        ),
        migrations.AddField(
            model_name='course',
            name='users',
            field=models.ManyToManyField(through='gamification.Registration', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='assignment',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.course'),
        ),
        migrations.CreateModel(
            name='ArtifactReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.TextField(choices=[('COMPLETED', 'Completed'), ('INCOMPLETE', 'Incomplete'), ('LATE', 'Late')], default='INCOMPLETE')),
                ('artifact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.artifact')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.registration')),
            ],
            options={
                'verbose_name': 'artifact_review',
                'verbose_name_plural': 'artifact_reviews',
                'db_table': 'artifact_review',
            },
        ),
        migrations.AddField(
            model_name='artifact',
            name='assignment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.assignment'),
        ),
        migrations.AddField(
            model_name='artifact',
            name='entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.entity'),
        ),
        migrations.AddField(
            model_name='answer',
            name='artifact_review',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.artifactreview'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question_option',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.questionoption'),
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.rule')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.registration')),
            ],
            options={
                'verbose_name': 'achievement',
                'verbose_name_plural': 'achievements',
                'db_table': 'achievements',
            },
        ),
    ]
