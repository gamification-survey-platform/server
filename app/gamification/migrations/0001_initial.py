# Generated by Django 3.2 on 2022-06-30 03:12

import app.gamification.models.user
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('andrew_id', models.CharField(error_messages={'unique': 'A user with that andrew id already exists.'}, help_text='Required. 150 characters or fewer. Lower case letters only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='Andrew ID')),
                ('image', models.ImageField(blank=True, upload_to='profile_pics', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['png', 'jpg', 'jpeg'])], verbose_name='profile picture')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='data joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'users',
            },
            managers=[
                ('objects', app.gamification.models.user.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_number', models.CharField(blank=True, max_length=150, verbose_name='course_number')),
                ('course_name', models.CharField(blank=True, max_length=150, verbose_name='course name')),
                ('syllabus', models.TextField(blank=True, verbose_name='syllabus')),
                ('semester', models.CharField(blank=True, max_length=150, verbose_name='semester')),
                ('visible', models.BooleanField(default=False, verbose_name='visible')),
            ],
            options={
                'verbose_name': 'course',
                'verbose_name_plural': 'courses',
                'db_table': 'courses',
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.course')),
            ],
            options={
                'verbose_name': 'entity',
                'verbose_name_plural': 'entities',
                'db_table': 'entities',
            },
        ),
        migrations.CreateModel(
            name='Individual',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gamification.entity')),
            ],
            options={
                'verbose_name': 'individual',
                'verbose_name_plural': 'individuals',
                'db_table': 'individuals',
            },
            bases=('gamification.entity',),
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gamification.entity')),
                ('name', models.CharField(blank=True, max_length=150, verbose_name='team')),
            ],
            options={
                'verbose_name': 'team',
                'verbose_name_plural': 'teams',
                'db_table': 'teams',
            },
            bases=('gamification.entity',),
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userRole', models.TextField(choices=[('Student', 'Student'), ('Instructor', 'Instructor'), ('TA', 'Ta')], default='Student')),
                ('courses', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.course')),
                ('users', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'registration',
                'verbose_name_plural': 'registrations',
                'db_table': 'registration',
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.entity')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.registration')),
            ],
            options={
                'verbose_name': 'membership',
                'verbose_name_plural': 'membership',
                'db_table': 'membership',
            },
        ),
        migrations.AddField(
            model_name='entity',
            name='registration',
            field=models.ManyToManyField(through='gamification.Membership', to='gamification.Registration'),
        ),
        migrations.AddField(
            model_name='course',
            name='users',
            field=models.ManyToManyField(through='gamification.Registration', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assignment_name', models.CharField(blank=True, max_length=150, verbose_name='assignment name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('assignment_type', models.TextField(blank=True, choices=[('Individual', 'Individual'), ('Team', 'Team')], default='Individual')),
                ('submission_type', models.TextField(blank=True, choices=[('File', 'File'), ('URL', 'Url'), ('Text', 'Text')], default='File')),
                ('total_score', models.FloatField(blank=True, null=True)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('date_created', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='date created')),
                ('date_released', models.DateTimeField(blank=True, null=True, verbose_name='date_released')),
                ('date_due', models.DateTimeField(blank=True, null=True, verbose_name='date_due')),
                ('review_assign_policy', models.TextField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C')], default='A')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.course')),
            ],
            options={
                'verbose_name': 'assignment',
                'verbose_name_plural': 'assignments',
                'db_table': 'assignment',
            },
        ),
    ]
