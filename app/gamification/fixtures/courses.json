[{"model": "gamification.course", "pk": 1, "fields": {"course_number": "18652", "course_name": "Foundations of Software Engineering", "syllabus": "In this course, you will learn about software engineering paradigms that have shaped the software industry over the past few decades. You will be exposed to fundamental disciplines of software engineering as well as engineering practices that crosscut system, project, and user perspectives. You will learn to iteratively define requirements, and architect, design, implement, integrate, test, and deploy a solution. You will work on self-organizing teams and manage the work collaboratively. You will also learn to solve a real problem subject to multiple constraints while keeping the stakeholders involved throughout the lifecycle and balancing the underlying engineering tradeoffs. The topics are applied in the context of a semester-long group project. Please note that this course is intended for ECE master students with a concentration in Software Engineering and will satisfy the \"Software Engineering and Design\" course area requirement. Students should be familiar with basic software development experience with proficiency in at least one modern programming language and modern programming concepts. Prior to admission, students must successful complete a programming assignment to demonstrate familiarity with required software technologies.", "semester": "Fall 2021", "visible": true}}, {"model": "gamification.course", "pk": 2, "fields": {"course_number": "18668", "course_name": "Data Science for Software Engineering", "syllabus": "Building, operating and maintaining software systems generate large and diverse sets of data that capture process, product, and project information. As software systems and processes used to create them increase in complexity, software engineers, development teams, and engineering managers must rely on data-driven decisions to handle problems that arise from the system conception to its maintenance. This course applies data science techniques in the context of software engineering (SE). The richness and volume of data available make techniques rooted in machine learning and optimization particularly suitable in this context with many practical applications. The main focus of the course is on applications of machine learning, but also covering optimization techniques. Students will learn (1) how to solve SE problems through a data-driven approach, and (2) how to bootstrap SE principles to implement and evaluate data-driven applications. Applications include generation of requirement specifications, automatic code documentation; software project cost estimation; software quality prediction; semi-automatic refactoring; requirements and defect prioritization, automatic bug assignment and test cases generation. A variety of data science techniques will be used, including deep learning, supervised and semi-supervised learning, search-based methods, and topic modeling. At the end of the course, students are expected to (i) identify SE problems that can be addressed by data science techniques; (ii) identify the sources and nature of the data needed to solve these problems; (iii) choose the proper combinations of data science techniques to solve them; (iv) design, implement, and test data science applications using sound SE principles.", "semester": "Spring 2022", "visible": true}}, {"model": "gamification.course", "pk": 3, "fields": {"course_number": "18661", "course_name": "Introduction to Machine Learning for Engineers", "syllabus": "This course provides an introduction to machine learning with a special focus on engineering applications. The course starts with a mathematical background required for machine learning and covers approaches for supervised learning (linear models, kernel methods, decision trees, neural networks) and unsupervised learning (clustering, dimensionality reduction), as well as theoretical foundations of machine learning (learning theory, optimization). Evaluation will consist of mathematical problem sets and programming projects targeting real-world engineering applications. This course is crosslisted with 18-461. ECE graduate students will be prioritized for 18-661, and ECE undergraduate students will be prioritized for 18-461. Although students in 18-461 will share lectures with students in 18-661, students in 18-461 will receive distinct homework assignments, distinct programming projects, and distinct exams from the ones given to students in 18-661. Specifically, the homework assignments, programming projects, and exams that are given to the 18-661 students will be more challenging than those given to the 18-461 students.", "semester": "Spring 2024", "visible": false}}, {"model": "gamification.course", "pk": 4, "fields": {"course_number": "18749", "course_name": "Building Reliable Distributed Systems", "syllabus": "The course provides an in-depth and hands-on overview of designing and developing reliable distributed systems, throughout a system?s lifecycle, starting from fault-tolerant design and execution (replication, group communication, databases) to fault-recovery (fault-detection, logging, check-pointing, failure-diagnosis) for various classes of faults (crashes, communication errors, software upgrades). The course will cover real-world practices for reliability, supplemented by case studies of large-scale downtime incidents. The concepts will be taught in the context of contemporary cloud-computing platforms, and the course will include a hands-on project that involves the design, implementation and empirical evaluation of a reliable distributed cloud-based system. Students will be taught to write, review, and present a conference-style research paper by the end of the semester, with the goal of documenting the design, lessons learned and experimental results of their team project. Students can expect to learn about the reliability issues underlying cloud computing, the tools and best practices for implementing and evaluating reliability, and the strengths and weaknesses of current cloud-computing platforms from the perspective of reliability.", "semester": "Summer 2024", "visible": false}}, {"model": "gamification.course", "pk": 5, "fields": {"course_number": "18664", "course_name": "Software Refactoring", "syllabus": "Refactoring aims to improve the system's structural quality without changing its behavior. It is essential practice to guarantee programs' longevity since maintenance activities often degrade the system structure. Thus, it is in the software companies' best interests to ensure that developers know how to refactor their systems. Unfortunately, refactoring is not a trivial task; it can change the entire system structure! Undesirable effects can occur if developers do not know how to carry on these changes. They can degrade the structural quality and even introduce defects.\r\n\r\nThe focus of the course is to learn how to confidently apply refactoring operations. Students will learn to apply refactoring for different granularity levels in a software system and additional resources such as APIs, databases, and test code. By the end of the course, students are expected to (i) recognize symptoms in the source code that warrant refactoring; (ii) apply refactoring at the architectural level and code level; (iii) evaluate the impact of the applied refactoring operations, (iv) design, implement, and deploy a tool to support software refactoring.\r\n\r\nThis course is especially intended for ECE students pursuing a Master of Science degree in Software Engineering.", "semester": "Spring 2022", "visible": true}}]