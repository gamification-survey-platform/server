"""
Django settings for gamification project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from django.conf.global_settings import DATETIME_INPUT_FORMATS
from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

load_dotenv(BASE_DIR / ".env")

# Whether in prod or dev
ENV = os.getenv("ENV", None)

# Whether to use AWS S3 for storage.
USE_S3 = os.getenv("USE_S3", False) == "True"

DB_NAME = os.getenv("DB_NAME", "dev")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", False) == "True"

ALLOWED_HOSTS = [
    "ec2-13-57-207-133.us-west-1.compute.amazonaws.com",
    "13.57.207.133",
    "localhost",
    "127.0.0.1",
    "db",
]


CSRF_TRUSTED_ORIGINS = os.getenv("CSRF_TRUSTED_ORIGINS", "localhost:8000").split(" ")

# Application definition

INSTALLED_APPS = [
    "corsheaders",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.sites",
    "django.contrib.staticfiles",
    "rest_framework_swagger",
    "widget_tweaks",
    "rest_framework",
    "storages",
    "drf_yasg",
    "app.gamification",
    "django_cleanup.apps.CleanupConfig",
    "rest_framework_jwt",
]

# CORS_ALLOW_ALL_ORIGINS = True
SWAGGER_SETTINGS = {
    "USE_SESSION_AUTH": False,
    "SECURITY_DEFINITIONS": {"Bearer": {"type": "apiKey", "name": "Authorization", "in": "header"}},
}
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = "config.urls"

TEMPLATES_DIR = BASE_DIR / "templates"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [TEMPLATES_DIR],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

LOGIN_URL = "/signin/"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

if ENV == "prod":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("DB_NAME", None),
            "USER": os.getenv("DB_USER", None),
            "PASSWORD": os.getenv("DB_PASSWORD", None),
            "HOST": os.getenv("DB_HOST", None),
            "PORT": os.getenv("DB_PORT", None),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": DB_NAME,
            "USER": "dbuser",
            "PASSWORD": "dbuser",
            "HOST": "db",
            "PORT": "5432",
        },
    }

AUTH_USER_MODEL = "gamification.CustomUser"

# Django Rest Framework (DRF) and JWT
# https://jpadilla.github.io/django-rest-framework-jwt/
REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_jwt.authentication.JSONWebTokenAuthentication",
    ],
}
# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "US/Pacific"

USE_I18N = True

# USE_L10N = True
USE_TZ = True

DATETIME_INPUT_FORMATS += [
    "%Y-%m-%d, %I:%M:%S %p",  # '2006-10-25 14:30:59'
    "%Y-%m-%d, %I:%M:%S.%f %p",  # '2006-10-25 14:30:59.000200'
    "%Y-%m-%d, %I:%M %p",  # '2006-10-25 14:30'
    "%m/%d/%Y, %I:%M:%S %p",  # '10/25/2006 14:30:59'
    "%m/%d/%Y, %I:%M:%S.%f %p",  # '10/25/2006 14:30:59.000200'
    "%m/%d/%Y, %I:%M %p",  # '10/25/2006 14:30'
    "%m/%d/%y, %I:%M:%S %p",  # '10/25/06 14:30:59'
    "%m/%d/%y, %I:%M:%S.%f %p",  # '10/25/06 14:30:59.000200'
    "%m/%d/%y, %I:%M %p",  # '10/25/06 14:30'
]


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Email SMTP Configuration
# https://docs.djangoproject.com/en/3.2/topics/email/
EMAIL_BACKEND = os.getenv("EMAIL_BACKEND", "django.core.mail.backends.console.EmailBackend")
EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.mailgun.org")
EMAIL_PORT = os.getenv("EMAIL_PORT", "587")
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv("EMAIL_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_PASSWORD")


# Django Storages
# https://django-storages.readthedocs.io/en/latest/

# AWS settings
if USE_S3:
    AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
    if ENV == "dev":
        AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME_DEV")
    else:
        AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME_PROD")
    AWS_S3_REGION_NAME = os.getenv("AWS_REGION_NAME")
    AWS_DEFAULT_ACL = None
    AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com"
    AWS_S3_FILE_OVERWRITE = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

if USE_S3:
    STATICFILES_LOCATION = "static"
    STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN }/{STATICFILES_LOCATION}/"
    STATICFILES_STORAGE = "config.storages.StaticStorage"
else:
    STATIC_URL = "/static/"

STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Media files (User uploaded files)
# https://docs.djangoproject.com/en/3.2/topics/files/

if USE_S3:
    MEDIAFILES_LOCATION = "media"
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN }/{MEDIAFILES_LOCATION}/"
    DEFAULT_FILE_STORAGE = "config.storages.MediaStorage"
else:
    MEDIA_ROOT = BASE_DIR / "media"
    MEDIA_URL = "/media/"
